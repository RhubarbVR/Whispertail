@using System.Diagnostics.CodeAnalysis;
@inject Localisation localizer
@inherits FluentInputBase<string>

<fluent-text-field @ref=Element
                   class="@ClassValue"
                   style="@StyleValue"
                   readonly="@Readonly"
                   autofocus="@Autofocus"
                   placeholder="@localizer.GetLocalString(Placeholder)"
                   type="@TextFieldType.ToAttributeValue()"
                   list=@DataList
                   maxlength="@Maxlength"
                   minlength="@Minlength"
                   pattern=@Pattern
                   size="@Size"
                   spellcheck="@Spellcheck"
                   id=@Id
                   value=@Value
                   current-value="@BindConverter.FormatValue(CurrentValue)"
                   disabled="@Disabled"
                   name=@Name
                   required="@Required"
                   appearance="@Appearance.ToAttributeValue()"
                   @onchange="@(EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString))"
                   @attributes="AdditionalAttributes">
    @ChildContent
</fluent-text-field>

@code {
    /// <summary>
    /// Gets or sets if the text area is auto focussed
    /// </summary>
    [Parameter]
    public bool Autofocus { get; set; }

    /// <summary>
    /// Gets or sets the placholder text
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; }

    /// <summary>
    /// Gets or sets the text filed type. See <see cref="FluentUI.TextFieldType"/>
    /// </summary>
    [Parameter]
    public TextFieldType? TextFieldType { get; set; }

    /// <summary>
    /// Allows associating a <see href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist">datalist</see> to the element by <see href="https://developer.mozilla.org/en-US/docs/Web/API/Element/id">id</see>.
    /// </summary>
    [Parameter]
    public string DataList { get; set; }

    /// <summary>
    /// Gets or sets the maximum length
    /// </summary>
    [Parameter]
    public int? Maxlength { get; set; }

    /// <summary>
    /// Gets or sets the minimum length
    /// </summary>
    [Parameter]
    public int? Minlength { get; set; }

    /// <summary>
    /// A regular expression that the value must match to pass validation.
    /// </summary>
    [Parameter]
    public string Pattern { get; set; }

    /// <summary>
    /// Gets or sets the size of the text field
    /// </summary>
    [Parameter]
    public int? Size { get; set; }

    /// <summary>
    /// Gets or sets the if spellcheck should be used
    /// </summary>
    [Parameter]
    public bool? Spellcheck { get; set; }

    /// <summary>
    /// Gets or sets the visual appearance. See <see cref="FluentUI.Appearance"/>
    /// </summary>
    [Parameter]
    public Appearance? Appearance { get; set; }

    /// <summary>
    /// Gets or sets the content to be rendered inside the component.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override bool TryParseValueFromString(string value, out string result, [NotNullWhen(false)] out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        localizer.LocalReload += StateHasChanged;
    }
}