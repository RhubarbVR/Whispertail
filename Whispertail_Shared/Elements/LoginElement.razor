@using Microsoft.Extensions.Logging;
@using System.ComponentModel.DataAnnotations;
@using Nakama;
@inject Localisation localizer
@inject ILogger<LoginElement> Logger
@inject ClientManager clientManager
<Stack Style="width: 100%; height:100%" Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Center" VerticalAlignment="StackVerticalAlignment.Center" VerticalGap="3">
    <LoadingLogo Size="130" IsLoading=IsLoading />
    @if (IsRegister)
    {
        <h2><Local DataString="Programs.Login.Register" /></h2>
    }
    else
    {
        <h2><Local DataString="Programs.Login.Login" /></h2>
    }
    <p style="color: var(--accent-fill-rest);"><Local DataString="@ErrorMessage" /></p>


    @if (IsRegister)
    {
        <Stack Style="width: auto; height: auto" Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Left" VerticalAlignment="StackVerticalAlignment.Center" VerticalGap="3">
            <p><Local DataString="Programs.Login.Username" /></p>
            <LocalTextField Style="width: 250pt;" @bind-Value=Username Placeholder="Programs.Login.Username" />
        </Stack>
    }

    <Stack Style="width: auto; height: auto" Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Left" VerticalAlignment="StackVerticalAlignment.Center" VerticalGap="3">
        <p><Local DataString="Programs.Login.Email" /></p>
        <LocalTextField Style="width: 250pt;" @bind-Value=Email TextFieldType="TextFieldType.Email" Placeholder="Programs.Login.Email" />
    </Stack>

    <Stack Style="width: auto; height: auto" Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Left" VerticalAlignment="StackVerticalAlignment.Center" VerticalGap="3">
        <p><Local DataString="Programs.Login.Password" /></p>
        <LocalTextField Style="width: 250pt;" @bind-Value=Password TextFieldType="TextFieldType.Password" Placeholder="Programs.Login.Password" />
    </Stack>

    @if (IsRegister)
    {
        <Stack Style="width: auto; height: auto" Orientation="Orientation.Vertical" HorizontalAlignment="StackHorizontalAlignment.Left" VerticalAlignment="StackVerticalAlignment.Center" VerticalGap="3">
            <p><Local DataString="Programs.Login.ConfirmPassword" /></p>
            <LocalTextField Style="width: 250pt;" @bind-Value=ConfPassword TextFieldType="TextFieldType.Password" Placeholder="Programs.Login.ConfirmPassword" />
        </Stack>

        <FluentButton @onclick=ExecuteAction Style="width: 150pt;" Appearance="Appearance.Accent"><Local DataString="Programs.Login.RegisterButton" /></FluentButton>
        <p>@localizer.GetLocalString("Programs.Login.LoginText")<text>&nbsp; &nbsp;</text><a href="javascript:void(0)" @onclick="GoToLogin">@localizer.GetLocalString("Programs.Login.LoginButton")</a></p>
    }
    else
    {
        <FluentButton @onclick=ExecuteAction Style="width: 150pt;" Appearance="Appearance.Accent"><Local DataString="Programs.Login.LoginButton" /></FluentButton>
        <p>@localizer.GetLocalString("Programs.Login.RegisterText")<text>&nbsp; &nbsp;</text><a href="javascript:void(0)" @onclick="GoToRegister">@localizer.GetLocalString("Programs.Login.RegisterButton")</a></p>
    }


</Stack>


@code {

    public string ErrorMessage = "";

    public string Username;

    public string Password;
    public string ConfPassword;

    public string Email;

    private bool IsLoading;

    private bool IsRegister;

    public void GoToLogin()
    {
        IsRegister = false;
    }

    public void GoToRegister()
    {
        IsRegister = true;
    }

    bool IsValidEmail(string email)
    {
        var trimmedEmail = email.Trim();

        if (trimmedEmail.EndsWith("."))
        {
            return false;
        }
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == trimmedEmail;
        }
        catch
        {
            return false;
        }
    }

    public async Task ExecuteAction()
    {
        try
        {
            if (IsLoading)
            {
                return;
            }
            ErrorMessage = "";
            if (string.IsNullOrEmpty(Email) || !IsValidEmail(Email))
            {
                ErrorMessage = "Gabbracoon.Validator.Email";
                return;
            }
            if (string.IsNullOrEmpty(Password))
            {
                ErrorMessage = "Programs.Login.nullError";
                return;
            }
            if (IsRegister)
            {
                if (string.IsNullOrEmpty(Username))
                {
                    ErrorMessage = "Gabbracoon.Validator.Username";
                    return;
                }
            }
            IsLoading = true;
            var session = await clientManager.AuthenticateEmailAsync(Email, Password, Username, IsRegister);
            if (session.IsExpired)
            {
                ErrorMessage = "API.DefaultError";
            }
            IsLoading = false;
        }
        catch (ApiResponseException error)
        {
            ErrorMessage = error.Message;
            IsLoading = false;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Failed to ExecuteAction in login. Error: {ex}");
            IsLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        localizer.LocalReload += StateHasChanged;
    }
}
